$date
	Tue Mar 25 13:44:33 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module min_mex_tb $end
$var event 1 ! _ivl_0 $end
$var wire 1 " outValid $end
$var wire 5 # data_out [4:0] $end
$var parameter 32 $ ADDR_WIDTH $end
$var parameter 32 % DATA_WIDTH $end
$var reg 4 & addr [3:0] $end
$var reg 1 ' clk $end
$var reg 5 ( data [4:0] $end
$var reg 1 ) dataValid $end
$var reg 1 * read $end
$var reg 1 + reset $end
$var reg 32 , seed [31:0] $end
$scope module dut $end
$var wire 4 - addr [3:0] $end
$var wire 1 ' clk $end
$var wire 5 . data [4:0] $end
$var wire 1 ) dataValid $end
$var wire 1 * read $end
$var wire 1 + reset $end
$var wire 4 / state [3:0] $end
$var wire 1 0 resetComplete $end
$var wire 1 " outValid $end
$var wire 1 1 dp_done $end
$var wire 5 2 data_out [4:0] $end
$var parameter 32 3 ADDR_WIDTH $end
$var parameter 32 4 DATA_WIDTH $end
$scope module control_unit $end
$var wire 1 ' clk $end
$var wire 1 ) dataValid $end
$var wire 1 * read $end
$var wire 1 + reset $end
$var wire 1 0 resetComplete $end
$var wire 1 " outValid $end
$var wire 1 1 dp_done $end
$var parameter 3 5 S_DONE $end
$var parameter 3 6 S_IDLE $end
$var parameter 3 7 S_READ $end
$var parameter 3 8 S_READ_INTERMEDIATE_1 $end
$var parameter 3 9 S_READ_INTERMEDIATE_2 $end
$var parameter 3 : S_RUN $end
$var parameter 3 ; S_RUN_INTERMEDIATE_1 $end
$var parameter 3 < S_RUN_INTERMEDIATE_2 $end
$var reg 3 = nxt_state [2:0] $end
$var reg 4 > state [3:0] $end
$upscope $end
$scope module datapath_unit $end
$var wire 4 ? addr [3:0] $end
$var wire 1 ' clk $end
$var wire 5 @ data_in [4:0] $end
$var wire 5 A mem_data [4:0] $end
$var wire 1 + reset $end
$var wire 4 B state [3:0] $end
$var wire 5 C tmp_2 [4:0] $end
$var wire 5 D tmp_1 [4:0] $end
$var wire 5 E sm [4:0] $end
$var wire 1 0 resetComplete $end
$var wire 4 F mem_addr [3:0] $end
$var wire 5 G gre [4:0] $end
$var wire 5 H data_out [4:0] $end
$var wire 5 I data_mem [4:0] $end
$var parameter 32 J ADDR_WIDTH $end
$var parameter 32 K DATA_WIDTH $end
$var parameter 4 L S_DONE $end
$var parameter 4 M S_IDLE $end
$var parameter 4 N S_READ $end
$var parameter 4 O S_READ_INTERMEDIATE_1 $end
$var parameter 4 P S_READ_INTERMEDIATE_2 $end
$var parameter 4 Q S_RUN $end
$var parameter 4 R S_RUN_INTERMEDIATE_1 $end
$var parameter 4 S S_RUN_INTERMEDIATE_2 $end
$var parameter 36 T depth $end
$var reg 1 1 dp_done $end
$var reg 5 U in1 [4:0] $end
$var reg 5 V in2 [4:0] $end
$var reg 5 W in3 [4:0] $end
$var reg 5 X mn [4:0] $end
$var reg 5 Y mx [4:0] $end
$var reg 1 Z re $end
$var reg 5 [ resetAddr [4:0] $end
$var reg 1 \ resetting $end
$var reg 4 ] temp_addr [3:0] $end
$var reg 1 ^ we $end
$scope module cmp $end
$var wire 5 _ A [4:0] $end
$var wire 1 ` A_gt_B $end
$var wire 5 a B [4:0] $end
$var wire 1 b eq0 $end
$var wire 1 c eq1 $end
$var wire 1 d eq2 $end
$var wire 1 e eq3 $end
$var wire 1 f eq4 $end
$var wire 1 g eq4_and_eq3 $end
$var wire 1 h eq4_and_gt3 $end
$var wire 1 i eq4_eq3_and_eq2 $end
$var wire 1 j eq4_eq3_and_gt2 $end
$var wire 1 k eq4_eq3_eq2_and_eq1 $end
$var wire 1 l eq4_eq3_eq2_and_gt1 $end
$var wire 1 m eq4_eq3_eq2_eq1_and_gt0 $end
$var wire 1 n gt0 $end
$var wire 1 o gt1 $end
$var wire 1 p gt2 $end
$var wire 1 q gt3 $end
$var wire 1 r gt4 $end
$var wire 1 s not_B0 $end
$var wire 1 t not_B1 $end
$var wire 1 u not_B2 $end
$var wire 1 v not_B3 $end
$var wire 1 w not_B4 $end
$var wire 1 x or_temp1 $end
$var wire 1 y or_temp2 $end
$var wire 1 z or_temp3 $end
$var wire 5 { smaller [4:0] $end
$var wire 5 | greater [4:0] $end
$scope module greater_mux $end
$var wire 5 } in0 [4:0] $end
$var wire 5 ~ in1 [4:0] $end
$var wire 1 ` sel $end
$var wire 5 !" out [4:0] $end
$scope module mux0 $end
$var wire 1 "" and_in0 $end
$var wire 1 #" and_in1 $end
$var wire 1 $" in0 $end
$var wire 1 %" in1 $end
$var wire 1 &" not_sel $end
$var wire 1 '" out $end
$var wire 1 ` sel $end
$upscope $end
$scope module mux1 $end
$var wire 1 (" and_in0 $end
$var wire 1 )" and_in1 $end
$var wire 1 *" in0 $end
$var wire 1 +" in1 $end
$var wire 1 ," not_sel $end
$var wire 1 -" out $end
$var wire 1 ` sel $end
$upscope $end
$scope module mux2 $end
$var wire 1 ." and_in0 $end
$var wire 1 /" and_in1 $end
$var wire 1 0" in0 $end
$var wire 1 1" in1 $end
$var wire 1 2" not_sel $end
$var wire 1 3" out $end
$var wire 1 ` sel $end
$upscope $end
$scope module mux3 $end
$var wire 1 4" and_in0 $end
$var wire 1 5" and_in1 $end
$var wire 1 6" in0 $end
$var wire 1 7" in1 $end
$var wire 1 8" not_sel $end
$var wire 1 9" out $end
$var wire 1 ` sel $end
$upscope $end
$scope module mux4 $end
$var wire 1 :" and_in0 $end
$var wire 1 ;" and_in1 $end
$var wire 1 <" in0 $end
$var wire 1 =" in1 $end
$var wire 1 >" not_sel $end
$var wire 1 ?" out $end
$var wire 1 ` sel $end
$upscope $end
$upscope $end
$scope module smaller_mux $end
$var wire 5 @" in0 [4:0] $end
$var wire 5 A" in1 [4:0] $end
$var wire 1 ` sel $end
$var wire 5 B" out [4:0] $end
$scope module mux0 $end
$var wire 1 C" and_in0 $end
$var wire 1 D" and_in1 $end
$var wire 1 E" in0 $end
$var wire 1 F" in1 $end
$var wire 1 G" not_sel $end
$var wire 1 H" out $end
$var wire 1 ` sel $end
$upscope $end
$scope module mux1 $end
$var wire 1 I" and_in0 $end
$var wire 1 J" and_in1 $end
$var wire 1 K" in0 $end
$var wire 1 L" in1 $end
$var wire 1 M" not_sel $end
$var wire 1 N" out $end
$var wire 1 ` sel $end
$upscope $end
$scope module mux2 $end
$var wire 1 O" and_in0 $end
$var wire 1 P" and_in1 $end
$var wire 1 Q" in0 $end
$var wire 1 R" in1 $end
$var wire 1 S" not_sel $end
$var wire 1 T" out $end
$var wire 1 ` sel $end
$upscope $end
$scope module mux3 $end
$var wire 1 U" and_in0 $end
$var wire 1 V" and_in1 $end
$var wire 1 W" in0 $end
$var wire 1 X" in1 $end
$var wire 1 Y" not_sel $end
$var wire 1 Z" out $end
$var wire 1 ` sel $end
$upscope $end
$scope module mux4 $end
$var wire 1 [" and_in0 $end
$var wire 1 \" and_in1 $end
$var wire 1 ]" in0 $end
$var wire 1 ^" in1 $end
$var wire 1 _" not_sel $end
$var wire 1 `" out $end
$var wire 1 ` sel $end
$upscope $end
$upscope $end
$upscope $end
$scope module cmp_2 $end
$var wire 5 a" A [4:0] $end
$var wire 1 b" A_gt_B $end
$var wire 5 c" B [4:0] $end
$var wire 1 d" eq0 $end
$var wire 1 e" eq1 $end
$var wire 1 f" eq2 $end
$var wire 1 g" eq3 $end
$var wire 1 h" eq4 $end
$var wire 1 i" eq4_and_eq3 $end
$var wire 1 j" eq4_and_gt3 $end
$var wire 1 k" eq4_eq3_and_eq2 $end
$var wire 1 l" eq4_eq3_and_gt2 $end
$var wire 1 m" eq4_eq3_eq2_and_eq1 $end
$var wire 1 n" eq4_eq3_eq2_and_gt1 $end
$var wire 1 o" eq4_eq3_eq2_eq1_and_gt0 $end
$var wire 1 p" gt0 $end
$var wire 1 q" gt1 $end
$var wire 1 r" gt2 $end
$var wire 1 s" gt3 $end
$var wire 1 t" gt4 $end
$var wire 1 u" not_B0 $end
$var wire 1 v" not_B1 $end
$var wire 1 w" not_B2 $end
$var wire 1 x" not_B3 $end
$var wire 1 y" not_B4 $end
$var wire 1 z" or_temp1 $end
$var wire 1 {" or_temp2 $end
$var wire 1 |" or_temp3 $end
$var wire 5 }" smaller [4:0] $end
$var wire 5 ~" greater [4:0] $end
$scope module greater_mux $end
$var wire 5 !# in0 [4:0] $end
$var wire 5 "# in1 [4:0] $end
$var wire 1 b" sel $end
$var wire 5 ## out [4:0] $end
$scope module mux0 $end
$var wire 1 $# and_in0 $end
$var wire 1 %# and_in1 $end
$var wire 1 &# in0 $end
$var wire 1 '# in1 $end
$var wire 1 (# not_sel $end
$var wire 1 )# out $end
$var wire 1 b" sel $end
$upscope $end
$scope module mux1 $end
$var wire 1 *# and_in0 $end
$var wire 1 +# and_in1 $end
$var wire 1 ,# in0 $end
$var wire 1 -# in1 $end
$var wire 1 .# not_sel $end
$var wire 1 /# out $end
$var wire 1 b" sel $end
$upscope $end
$scope module mux2 $end
$var wire 1 0# and_in0 $end
$var wire 1 1# and_in1 $end
$var wire 1 2# in0 $end
$var wire 1 3# in1 $end
$var wire 1 4# not_sel $end
$var wire 1 5# out $end
$var wire 1 b" sel $end
$upscope $end
$scope module mux3 $end
$var wire 1 6# and_in0 $end
$var wire 1 7# and_in1 $end
$var wire 1 8# in0 $end
$var wire 1 9# in1 $end
$var wire 1 :# not_sel $end
$var wire 1 ;# out $end
$var wire 1 b" sel $end
$upscope $end
$scope module mux4 $end
$var wire 1 <# and_in0 $end
$var wire 1 =# and_in1 $end
$var wire 1 ># in0 $end
$var wire 1 ?# in1 $end
$var wire 1 @# not_sel $end
$var wire 1 A# out $end
$var wire 1 b" sel $end
$upscope $end
$upscope $end
$scope module smaller_mux $end
$var wire 5 B# in0 [4:0] $end
$var wire 5 C# in1 [4:0] $end
$var wire 1 b" sel $end
$var wire 5 D# out [4:0] $end
$scope module mux0 $end
$var wire 1 E# and_in0 $end
$var wire 1 F# and_in1 $end
$var wire 1 G# in0 $end
$var wire 1 H# in1 $end
$var wire 1 I# not_sel $end
$var wire 1 J# out $end
$var wire 1 b" sel $end
$upscope $end
$scope module mux1 $end
$var wire 1 K# and_in0 $end
$var wire 1 L# and_in1 $end
$var wire 1 M# in0 $end
$var wire 1 N# in1 $end
$var wire 1 O# not_sel $end
$var wire 1 P# out $end
$var wire 1 b" sel $end
$upscope $end
$scope module mux2 $end
$var wire 1 Q# and_in0 $end
$var wire 1 R# and_in1 $end
$var wire 1 S# in0 $end
$var wire 1 T# in1 $end
$var wire 1 U# not_sel $end
$var wire 1 V# out $end
$var wire 1 b" sel $end
$upscope $end
$scope module mux3 $end
$var wire 1 W# and_in0 $end
$var wire 1 X# and_in1 $end
$var wire 1 Y# in0 $end
$var wire 1 Z# in1 $end
$var wire 1 [# not_sel $end
$var wire 1 \# out $end
$var wire 1 b" sel $end
$upscope $end
$scope module mux4 $end
$var wire 1 ]# and_in0 $end
$var wire 1 ^# and_in1 $end
$var wire 1 _# in0 $end
$var wire 1 `# in1 $end
$var wire 1 a# not_sel $end
$var wire 1 b# out $end
$var wire 1 b" sel $end
$upscope $end
$upscope $end
$upscope $end
$scope module m $end
$var wire 4 c# addr [3:0] $end
$var wire 1 ' clk $end
$var wire 5 d# data [4:0] $end
$var wire 1 Z readEnable $end
$var wire 1 ^ writeEnable $end
$var parameter 32 e# ADDR_WIDTH $end
$var parameter 32 f# DATA_WIDTH $end
$var reg 5 g# temp_data [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b101 f#
b100 e#
b10000 T
b110 S
b101 R
b100 Q
b11 P
b10 O
b1 N
b0 M
b111 L
b101 K
b100 J
b110 <
b101 ;
b100 :
b11 9
b10 8
b1 7
b0 6
b111 5
b101 4
b100 3
b101 %
b100 $
$end
#0
$dumpvars
bx g#
bx d#
b0 c#
xb#
xa#
x`#
x_#
x^#
x]#
x\#
x[#
xZ#
xY#
xX#
xW#
xV#
xU#
xT#
xS#
xR#
xQ#
xP#
xO#
xN#
xM#
xL#
xK#
xJ#
xI#
xH#
xG#
xF#
xE#
bx D#
bx C#
bx B#
xA#
x@#
x?#
x>#
x=#
x<#
x;#
x:#
x9#
x8#
x7#
x6#
x5#
x4#
x3#
x2#
x1#
x0#
x/#
x.#
x-#
x,#
x+#
x*#
x)#
x(#
x'#
x&#
x%#
x$#
bx ##
bx "#
bx !#
bx ~"
bx }"
x|"
x{"
xz"
xy"
xx"
xw"
xv"
xu"
xt"
xs"
xr"
xq"
xp"
xo"
xn"
xm"
xl"
xk"
xj"
xi"
xh"
xg"
xf"
xe"
xd"
bx c"
xb"
bx a"
x`"
x_"
x^"
x]"
x\"
x["
xZ"
xY"
xX"
xW"
xV"
xU"
xT"
xS"
xR"
xQ"
xP"
xO"
xN"
xM"
xL"
xK"
xJ"
xI"
xH"
xG"
xF"
xE"
xD"
xC"
bx B"
bx A"
bx @"
x?"
x>"
x="
x<"
x;"
x:"
x9"
x8"
x7"
x6"
x5"
x4"
x3"
x2"
x1"
x0"
x/"
x."
x-"
x,"
x+"
x*"
x)"
x("
x'"
x&"
x%"
x$"
x#"
x""
bx !"
bx ~
bx }
bx |
bx {
xz
xy
xx
xw
xv
xu
xt
xs
xr
xq
xp
xo
xn
xm
xl
xk
xj
xi
xh
xg
xf
xe
xd
xc
xb
bx a
x`
bx _
x^
b0 ]
x\
b0 [
xZ
b0 Y
b11111 X
bx W
bx V
bx U
b0 I
bx H
bx G
b0 F
bx E
bx D
bx C
b0 B
bx A
b0 @
b0 ?
b0 >
b0 =
bx 2
x1
00
b0 /
b0 .
b0 -
b100001001110111110111001001 ,
1+
0*
0)
b0 (
0'
b0 &
bx #
0"
1!
$end
#5000
1\
b0 A
b0 d#
bz #
bz 2
bz H
1^
0Z
1'
#10000
0'
0+
#15000
b1 F
b1 c#
b1 [
1'
#20000
0'
#25000
b10 F
b10 c#
b10 [
1'
#30000
0'
#35000
b11 F
b11 c#
b11 [
1'
#40000
0'
#45000
b100 F
b100 c#
b100 [
1'
#50000
0'
#55000
b101 F
b101 c#
b101 [
1'
#60000
0'
#65000
b110 F
b110 c#
b110 [
1'
#70000
0'
#75000
b111 F
b111 c#
b111 [
1'
#80000
0'
#85000
b1000 F
b1000 c#
b1000 [
1'
#90000
0'
#95000
b1001 F
b1001 c#
b1001 [
1'
#100000
0'
#105000
b1010 F
b1010 c#
b1010 [
1'
#110000
0'
#115000
b1011 F
b1011 c#
b1011 [
1'
#120000
0'
#125000
b1100 F
b1100 c#
b1100 [
1'
#130000
0'
#135000
b1101 F
b1101 c#
b1101 [
1'
#140000
0'
#145000
b1110 F
b1110 c#
b1110 [
1'
#150000
0'
#155000
b1111 F
b1111 c#
b1111 [
1'
#160000
0'
#165000
b1 =
b0 F
b0 c#
10
0\
1'
#170000
0'
#175000
b1 /
b1 >
b1 B
1'
#180000
b10 =
0'
1*
1)
#185000
b11 =
b10 /
b10 >
b10 B
1'
#190000
b101 A
b101 d#
b101 I
0'
b101 (
b101 .
b101 @
b11010010110010111110111011110110 ,
#195000
b1 =
b11 /
b11 >
b11 B
1'
#200000
0'
0*
#205000
b1 /
b1 >
b1 B
1'
#210000
b1 F
b1 c#
b1110 A
b1110 d#
b1110 I
0'
b1110 (
b1110 .
b1110 @
b10111011001101101100011111111 ,
b1 &
b1 -
b1 ?
#215000
1'
#220000
b10 =
0'
0)
1*
#225000
b11 =
b10 /
b10 >
b10 B
1'
#230000
0'
#235000
b100 =
b11 /
b11 >
b11 B
1'
#240000
0'
#245000
b0 F
b0 c#
b101 =
b100 /
b100 >
b100 B
1'
#250000
0'
#255000
0J#
0b#
1)#
0*#
1/#
00#
15#
06#
1;#
b11111 C
b11111 ~"
b11111 ##
1A#
0E#
0K#
1P#
0Q#
1V#
0W#
b1110 E
b1110 }"
b1110 D#
1\#
0]#
1-"
13"
19"
0(#
1%#
0.#
1+#
04#
11#
0:#
17#
0@#
1=#
0I#
0O#
1L#
0U#
1R#
0[#
1X#
0a#
1("
1."
14"
0N"
0T"
0Z"
1b"
1|"
1{"
1&"
1,"
12"
18"
1>"
1G"
1M"
0J"
1S"
0P"
1Y"
0V"
1_"
0o"
0n"
1z"
0l"
0`
0z
0y
0x
1p"
0q"
0r"
0s"
1t"
0m"
0k"
0j"
0i"
0k
0i
0g
0m
0l
0j
0h
0'"
b1110 G
b1110 |
b1110 !"
0?"
0H"
b0 D
b0 {
b0 B"
0`"
1s
0t
0u
0v
1w
0""
0:"
0D"
0\"
1u"
0v"
0w"
0x"
1y"
0$#
0<#
0F#
0^#
0d"
1e"
1f"
1g"
0h"
1b
0c
0d
0e
1f
0n
0o
0p
0q
0r
0#"
0)"
0/"
05"
0;"
0C"
0I"
0O"
0U"
0["
b110 =
0$"
1*"
10"
16"
0<"
0F"
1L"
1R"
1X"
0^"
0&#
1,#
12#
18#
0>#
0H#
1N#
1T#
1Z#
0`#
1'#
1-#
13#
19#
1?#
1G#
1M#
1S#
1Y#
1_#
0%"
0+"
01"
07"
0="
0E"
0K"
0Q"
0W"
0]"
b101 /
b101 >
b101 B
b1110 V
b1110 a
b1110 }
b1110 A"
b1110 c"
b1110 !#
b1110 C#
b11111 W
b11111 a"
b11111 "#
b11111 B#
b0 U
b0 _
b0 ~
b0 @"
bx A
bx d#
bx #
bx 2
bx H
0^
1Z
1'
#260000
0'
#265000
b1110 #
b1110 2
b1110 H
b100 =
b1110 A
b1110 d#
b110 /
b110 >
b110 B
b1110 g#
1'
#270000
0'
#275000
b1 F
b1 c#
b101 =
b100 /
b100 >
b100 B
b1 ]
b1110 X
b1110 Y
1'
#280000
0'
#285000
1*#
1/#
10#
15#
16#
1;#
1K#
1P#
1Q#
1V#
1W#
b1110 E
b1110 }"
b1110 D#
1\#
1(#
1.#
0+#
14#
01#
1:#
07#
1@#
1I#
1O#
0L#
1U#
0R#
1[#
0X#
1a#
0b"
1m"
0|"
1k"
0{"
1i"
0z"
0)#
b1110 C
b1110 ~"
b1110 ##
0A#
1k
1i
1g
1N"
1T"
b1110 D
b1110 {
b1110 B"
1Z"
1d"
1h"
0p"
0t"
0%#
0=#
1c
1d
1e
1I"
1O"
1U"
b110 =
0'#
0?#
0G#
0_#
1+"
11"
17"
1K"
1Q"
1W"
b101 /
b101 >
b101 B
b1110 W
b1110 a"
b1110 "#
b1110 B#
b1110 U
b1110 _
b1110 ~
b1110 @"
1'
#290000
0'
#295000
b100 =
b110 /
b110 >
b110 B
1'
#300000
0'
#305000
b10 F
b10 c#
b101 =
b100 /
b100 >
b100 B
b10 ]
1'
#310000
0'
#315000
b0 #
b0 2
b0 H
b110 =
b0 A
b0 d#
b101 /
b101 >
b101 B
b0 g#
1'
#320000
0'
0*
#325000
b100 =
b110 /
b110 >
b110 B
1'
#330000
0'
b10 &
b10 -
b10 ?
#335000
b11 F
b11 c#
b101 =
b100 /
b100 >
b100 B
b11 ]
1'
#340000
0'
#345000
0N"
0T"
b0 D
b0 {
b0 B"
0Z"
0P#
0V#
b0 E
b0 }"
b0 D#
0\#
0I"
0O"
0U"
0K#
0Q#
0W#
0&"
0,"
1)"
02"
1/"
08"
15"
0>"
0G"
0M"
0S"
0Y"
0_"
0(#
0.#
1+#
04#
11#
0:#
17#
0@#
0I#
0O#
0U#
0[#
0a#
1`
1b"
1z
1|"
1y
1{"
1x
1z"
1h
1j"
0k
0i
0g
1o
1p
1q
1-"
13"
b1110 G
b1110 |
b1110 !"
19"
0m"
0k"
0i"
1q"
1r"
1s"
1/#
15#
b1110 C
b1110 ~"
b1110 ##
1;#
0c
0d
0e
1t
1u
1v
0("
0."
04"
0e"
0f"
0g"
1v"
1w"
1x"
0*#
00#
06#
b110 =
0*"
00"
06"
0L"
0R"
0X"
0,#
02#
08#
0N#
0T#
0Z#
b101 /
b101 >
b101 B
b0 V
b0 a
b0 }
b0 A"
b0 c"
b0 !#
b0 C#
1'
#350000
0'
#355000
b100 =
b110 /
b110 >
b110 B
1'
#360000
0'
#365000
b100 F
b100 c#
b101 =
b100 /
b100 >
b100 B
b100 ]
b0 X
1'
#370000
0'
#375000
1(#
1.#
14#
1:#
1@#
1I#
1O#
1U#
1[#
1a#
0b"
0|"
0{"
0z"
1m"
1k"
1i"
0j"
0/#
05#
b0 C
b0 ~"
b0 ##
0;#
1e"
1f"
1g"
0q"
0r"
0s"
0+#
01#
07#
b110 =
0-#
03#
09#
0M#
0S#
0Y#
b101 /
b101 >
b101 B
b0 W
b0 a"
b0 "#
b0 B#
1'
#380000
0'
#385000
b100 =
b110 /
b110 >
b110 B
1'
#390000
0'
#395000
b101 F
b101 c#
b101 =
b100 /
b100 >
b100 B
b101 ]
1'
#400000
0'
#405000
b110 =
b101 /
b101 >
b101 B
1'
#410000
0'
#415000
b100 =
b110 /
b110 >
b110 B
1'
#420000
0'
#425000
b110 F
b110 c#
b101 =
b100 /
b100 >
b100 B
b110 ]
1'
#430000
0'
#435000
b110 =
b101 /
b101 >
b101 B
1'
#440000
0'
#445000
b100 =
b110 /
b110 >
b110 B
1'
#450000
0'
#455000
b111 F
b111 c#
b101 =
b100 /
b100 >
b100 B
b111 ]
1'
#460000
0'
#465000
b110 =
b101 /
b101 >
b101 B
1'
#470000
0'
#475000
b100 =
b110 /
b110 >
b110 B
1'
#480000
0'
#485000
b1000 F
b1000 c#
b101 =
b100 /
b100 >
b100 B
b1000 ]
1'
#490000
0'
#495000
b110 =
b101 /
b101 >
b101 B
1'
#500000
0'
#505000
b100 =
b110 /
b110 >
b110 B
1'
#510000
0'
#515000
b1001 F
b1001 c#
b101 =
b100 /
b100 >
b100 B
b1001 ]
1'
#520000
0'
#525000
b110 =
b101 /
b101 >
b101 B
1'
#530000
0'
#535000
b100 =
b110 /
b110 >
b110 B
1'
#540000
0'
#545000
b1010 F
b1010 c#
b101 =
b100 /
b100 >
b100 B
b1010 ]
1'
#550000
0'
#555000
b110 =
b101 /
b101 >
b101 B
1'
#560000
0'
#565000
b100 =
b110 /
b110 >
b110 B
1'
#570000
0'
#575000
b1011 F
b1011 c#
b101 =
b100 /
b100 >
b100 B
b1011 ]
1'
#580000
0'
#585000
b110 =
b101 /
b101 >
b101 B
1'
#590000
0'
#595000
b100 =
b110 /
b110 >
b110 B
1'
#600000
0'
#605000
b1100 F
b1100 c#
b101 =
b100 /
b100 >
b100 B
b1100 ]
1'
#610000
0'
#615000
b110 =
b101 /
b101 >
b101 B
1'
#620000
0'
#625000
b100 =
b110 /
b110 >
b110 B
1'
#630000
0'
#635000
b1101 F
b1101 c#
b101 =
b100 /
b100 >
b100 B
b1101 ]
1'
#640000
0'
#645000
b110 =
b101 /
b101 >
b101 B
1'
#650000
0'
#655000
b100 =
b110 /
b110 >
b110 B
1'
#660000
0'
#665000
b1110 F
b1110 c#
b101 =
b100 /
b100 >
b100 B
b1110 ]
1'
#670000
0'
#675000
b110 =
b101 /
b101 >
b101 B
1'
#680000
0'
#685000
b100 =
b110 /
b110 >
b110 B
1'
#690000
0'
#695000
b1111 F
b1111 c#
b101 =
b100 /
b100 >
b100 B
b1111 ]
1'
#700000
0'
#705000
b110 =
b101 /
b101 >
b101 B
1'
#710000
0'
#715000
b100 =
b110 /
b110 >
b110 B
1'
#720000
0'
#725000
b100 /
b100 >
b100 B
b111 =
11
1'
#730000
0'
#735000
1"
b111 /
b111 >
b111 B
1'
#740000
0'
#745000
1'
#750000
0'
#755000
1'
#760000
0'
#765000
1'
#770000
0'
#775000
1'
#780000
0'
#785000
1'
#790000
0'
#795000
1'
#800000
0'
#805000
1'
#810000
0'
#815000
1'
#820000
0'
#825000
1'
#830000
0'
