module min_mex_dp
#(
    parameter ADDR_WIDTH = 4,
    parameter DATA_WIDTH = 5
)
(
    input wire clk,
    input wire reset, // Received from Controller
    input wire[2:0] state,
    input wire [ADDR_WIDTH-1:0] addr,
    input wire [DATA_WIDTH-1:0] data_in,
    output reg resetComplete, // Sent to Controller
    output reg dp_done,
    output wire[DATA_WIDTH-1:0] data_out
);
localparam depth = 1 << ADDR_WIDTH;

localparam S_IDLE             = 3'b000;
localparam S_READ             = 3'b001;
localparam S_READ_INTERMEDIATE_1 = 3'b010;
localparam S_READ_INTERMEDIATE_2 = 3'b011;
localparam S_RUN              = 3'b100;
localparam S_DONE            = 3'b101;

reg re,we;
wire [DATA_WIDTH-1:0] mem_data;
reg [DATA_WIDTH-1:0]resetAddr;
reg resetting;
assign mem_data = (!re & we) ? data_in : 'hz;
assign data_out = (re & !we) ? mem_data : 'hz;
initial begin
    resetComplete=1;
end

mem #(
    .ADDR_WIDTH(ADDR_WIDTH),
    .DATA_WIDTH(DATA_WIDTH)
) m (
    .clk(clk),
    .readEnable(re),
    .writeEnable(we),
    .addr(addr),
    .data(mem_data)
);

always @(posedge clk) begin
    $display("data_out :%b , mem_data : %b ",data_out,mem_data);
    if (reset) begin
        resetAddr <= 0;
        resetting <= 1;
        we=1;
        re=0;
    end else if (resetting) begin
        if (resetAddr == (1<<ADDR_WIDTH)-1)begin
            resetComplete=1;
            resetting <= 0;
        end
        else begin
            resetAddr <= resetAddr + 1;
        end
    end
end

always @(posedge clk) begin
  case (state)
        S_IDLE: begin
            re=0;
            we=1;
        end
        S_READ: begin
        end
        S_READ_INTERMEDIATE_1: begin
            re=0;
            we=1;
        end
        S_READ_INTERMEDIATE_2: begin
        end
        S_RUN: begin
            re=1;
            we=0;
            dp_done=1;
        end
        S_DONE: begin
        end
    endcase
end
endmodule
