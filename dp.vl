module min_mex_dp
#(
    parameter ADDR_WIDTH = 4,
    parameter DATA_WIDTH = 5
)
(
    input wire clk,
    input wire reset, // Received from Controller
    input wire[3:0] state,
    input wire [ADDR_WIDTH-1:0] addr,
    input wire [DATA_WIDTH-1:0] data_in,
    output reg resetComplete, // Sent to Controller
    output reg dp_done,
    output reg[DATA_WIDTH-1:0] data_out,
    output reg [DATA_WIDTH-1:0] mx,
    output reg[DATA_WIDTH-1:0] mn,
    output wire rew,
    output wire wew,
    
    output wire dirty
//    output reg[2:0] tempaddr
);
localparam depth = 1 << ADDR_WIDTH;

localparam S_IDLE             = 4'b0000;
localparam S_READ             = 4'b0001;
localparam S_READ_INTERMEDIATE_1 = 4'b0010;
localparam S_READ_INTERMEDIATE_2 = 4'b0011;
localparam S_RUN_PRE = 4'b0100;
localparam S_RUN              = 4'b0101;
localparam S_RUN_INTERMEDIATE_1 = 4'b0110;
localparam S_RUN_INTERMEDIATE_2 = 4'b0111;
localparam S_DONE            = 4'b1000;

reg re,we;
reg loop2;
//temp
assign rew =re;
assign wew = we;
//temp

wire [DATA_WIDTH:0] mem_data;
reg [DATA_WIDTH-1:0]resetAddr;
reg resetting;
wire [DATA_WIDTH-1:0] data_mem;

assign data_mem = (reset || resetting) ? 0 : data_in;
assign mem_data = (!re & we) ? ((state==S_IDLE) ? {1'b0, 5'b0} : {1'b1, data_mem}) : 'hz;

//assign data_out = (re & !we) ? mem_data : ~0;
//assign resetComplete = (reset || resetting) ? 0 : 1;

always @(posedge clk) begin
    if(reset || resetting) resetComplete <= 0;
    else resetComplete<=1;

    if(re & !we )begin
       data_out<= mem_data;
    end else begin 
        data_out<=0;
    end
end

reg [ADDR_WIDTH-1:0] temp_addr;
wire[ADDR_WIDTH-1:0] mem_addr;

//assign tempaddr = temp_addr;

//always @(posedge clk) begin 
//    tempaddr <= temp_addr;
//end

initial begin
    resetAddr=0;
    // resetComplete=1;
    dp_done=0;
    temp_addr=0;
end

assign mem_addr = (state == S_IDLE) ? resetAddr : ((state == S_RUN | state == S_RUN_INTERMEDIATE_1 | state==S_RUN_INTERMEDIATE_2) ? temp_addr : addr);

mem #(
    .ADDR_WIDTH(ADDR_WIDTH),
    .DATA_WIDTH(DATA_WIDTH+1)//i do +1 for dirty bit :)
) m (
    .clk(clk),
    .readEnable(re),
    .writeEnable(we),
    .addr(mem_addr),
    .data(mem_data),
    .dirty(dirty)
);

//reg [DATA_WIDTH-1 : 0] mx,mn,cur;
reg[DATA_WIDTH-1:0] cur;
reg [DATA_WIDTH-1:0] in1,in2;
reg [DATA_WIDTH-1:0] in3,in4;
wire [DATA_WIDTH-1:0] gre,sm,tmp_1,tmp_2;
comparator cmp(
    .A(in1),
    .B(in2),
    .greater(gre),
    .smaller(tmp_1)
);
comparator cmp_2(
    .A(in3),
    .B(in4),
    .greater(tmp_2),
    .smaller(sm)
);
initial begin
    mx=0;
    mn=~0;
end

//always @(posedge clk or posedge reset) begin
    // $display("state %d reset %b resetting %b memaddr %d addr %d",state,reset,resetting,mem_addr,addr);
    // $display("data_out :%b , mem_data : %b ",data_out,mem_data);
    
//end

always @(posedge clk) begin
 if (reset) begin
         in1 <= 0;
         in2 <= 0;
         in3 <= ~0;
         in4 <= ~0;
         loop2<=0;
       temp_addr <= 0;
//         resetComplete <= 0;
       dp_done <= 0;
       resetAddr<=0;
       resetting <= 1;
       we<=1;
       re<=0;
       mn <= ~0;
       mx <= 0;
   end else if (resetting) begin
       $display("reset at address %d",resetAddr);
       if (resetAddr == (1<<ADDR_WIDTH)-1)begin
//             resetComplete=1;
           resetting <= 0;
       end
       else begin
           resetAddr <= resetAddr + 1;
       end
   end 
  case (state)
        S_IDLE: begin
            // resetAddr <= 0;

            re<=0;
            we<=1;
        end
        S_READ: begin
        end
        S_READ_INTERMEDIATE_1: begin
            re<=0;
            we<=1;
            in1 <= data_in;
            in2 <= data_in;
            in3 <= data_in;
        end
        S_READ_INTERMEDIATE_2: begin
        end
        S_RUN_PRE: begin
            re<=1;
            we<=0;/*to prevent data to be written to tempaddr{ why you ask? since the memory read is enabled in the next 3 states, then when transitioning from last read
            to run state the write is on and the address swithces immidiately to temp_addr which is 0 initially so the mem[0] is overwritten with mem[last]}*/
        end
        S_RUN: begin
            // $display("memaddr %d, tempaddr %d, memdata %d",mem_addr,temp_addr,mem_data);
            re<=1;
            we<=0;
        end
        S_RUN_INTERMEDIATE_1 : begin
            // $display("memaddr %d, tempaddr %d, memdata %d",mem_addr,temp_addr,mem_data);
            // $display("value at memdata and and %d %d %d",mem_data,mem_data&6'b100000,temp_addr);
          if(mem_data&6'b100000)begin
        //   $display("inside");
            in1 <= mx;
            in2 <= mem_data;
            in3 <= mn;
            in4 <= mem_data;
          end
          re<=1;
          we<=0;
        end
        S_RUN_INTERMEDIATE_2 : begin
            // $display("memaddr %d, tempaddr %d, memdata %d",mem_addr,temp_addr,mem_data);
            re<=1;
            we<=0;
            mx <= gre;
            mn <= sm;
          if(temp_addr == (1<<ADDR_WIDTH)-1)begin
                if(loop2)begin 
            dp_done<=1;
                end else begin
                    temp_addr<=1;
                    loop2<=1;
                 end
          end else begin 
            // $display("temp addr before %d ",temp_addr);
            temp_addr = temp_addr+1;
            // $display("temp addr after %d ",temp_addr);
          end
        end
        S_DONE: begin
            re<=1;
            we<=0;
            dp_done<=1;
        //    $display("max value: %d",mx);
        //    $display("min value: %d",mn);
        end
    endcase
end
endmodule