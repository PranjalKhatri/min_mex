module min_mex
#(
     parameter ADDR_WIDTH = 4,
    parameter DATA_WIDTH = 5
)
(
    input wire clk,
    input wire reset,
    input wire dataValid,
    input wire read,
    output wire resetComplete,
    input wire [ADDR_WIDTH-1:0] addr,
    input wire [DATA_WIDTH-1:0] data,
    output wire outValid,
    output wire[DATA_WIDTH-1: 0] data_out,
    output wire [7:0] an,
    output wire[3:0] state,
    output wire [6:0] a_to_g,
    output wire re,
    output wire we,
    output wire dirty
//    output wire[2:0] temp_addr
);
//wire [3:0] state;
wire dp_done;
//wire resetComplete;
wire [DATA_WIDTH-1:0] mx;
wire [DATA_WIDTH-1:0] mn;

min_mex_ctrl control_unit (
    .clk(clk),
    .reset(reset),
    .dataValid(dataValid),
    .read(read),
    .resetComplete(resetComplete),
    .dp_done(dp_done),
    .outValid(outValid),
    .state(state)
);

min_mex_dp 
#(
    .ADDR_WIDTH(ADDR_WIDTH),
    .DATA_WIDTH(DATA_WIDTH)
)
datapath_unit (
    .clk(clk),
    .reset(reset),
    .state(state),
    .addr(addr),
    .data_in(data),
    .resetComplete(resetComplete),
    .dp_done(dp_done),
    .data_out(data_out),
    .mx(mx),
    .mn(mn),
    .rew(re),
    .wew(we),
    .dirty(dirty)
//    .tempaddr(temp_addr)
);

 seven_segment_display u_seven_segment_display (
    .clk(clk),                // Connect the 100 MHz clock
    .reset(reset),            // Connect the reset signal
    .number1(mx),        // Connect the first input number (0-31)
    .number2(mn),        // Connect the second input number (0-31)
    .an(an),                  // Connect the anode signals (8 displays)
    .a_to_g(a_to_g)           // Connect the cathode signals (7 segments)
    );


endmodule