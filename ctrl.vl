module min_mex_ctrl
#(
    parameter ADDR_WIDTH = 4,
    parameter DATA_WIDTH = 5
)
(
    input wire clk,//clk
    input wire reset,//reset signal
    input wire dataValid,//data valid means giving input
    input wire read,//read the input or stop reading
    input wire resetComplete,//dp completed reset\\
    input wire dp_done,
    output wire outValid,//output is valid showing
    output reg [2:0] state//the state
);

localparam depth = 1 << ADDR_WIDTH;

localparam S_IDLE             = 3'b000;
localparam S_READ             = 3'b001;
localparam S_READ_INTERMEDIATE_1 = 3'b010;
localparam S_READ_INTERMEDIATE_2 = 3'b011;
localparam S_RUN              = 3'b100;
localparam S_DONE            = 3'b101;

reg [2:0] nxt_state;
reg [ADDR_WIDTH-1:0] resetAddr;
// reg resetting;


always @(posedge clk or posedge reset) begin
    if (reset) begin
        state <= S_IDLE;
    end else begin
        state <= nxt_state;
    end
end

always @(*) begin
    // $display("state : %b",state);
    case (state)
        S_IDLE: begin
            if (resetComplete && !reset)
                nxt_state = S_READ;
            else if (dataValid && resetComplete && !reset)
                nxt_state = S_READ;
            else
                nxt_state = S_IDLE;
        end
        S_READ: begin
            nxt_state = read ?  S_READ_INTERMEDIATE_1 : S_READ;
        end
        S_READ_INTERMEDIATE_1: begin
            nxt_state = S_READ_INTERMEDIATE_2;
        end
        S_READ_INTERMEDIATE_2: begin
            nxt_state = dataValid ? S_READ : S_RUN;
        end
        S_RUN: begin
            if (dp_done)
                nxt_state = S_DONE;
            else
                nxt_state = S_RUN;
        end
        S_DONE: begin
            nxt_state = S_DONE;
        end
        default: nxt_state = S_IDLE;
    endcase
end
assign outValid = (state == S_DONE) ? 1 : 0;

endmodule
