module min_mex_ctrl
(
    input wire clk,//clk
    input wire reset,//reset signal
    input wire dataValid,//data valid means giving input
    input wire read,//read the input or stop reading
    input wire resetComplete,//dp completed reset\\
    input wire dp_done,
    output wire outValid,//output is valid showing
    output reg [3:0] state//the state
);

localparam S_IDLE             = 4'b0000;
localparam S_READ             = 4'b0001;
localparam S_READ_INTERMEDIATE_1 = 4'b0010;
localparam S_READ_INTERMEDIATE_2 = 4'b0011;
localparam S_RUN_PRE = 4'b0100;
localparam S_RUN              = 4'b0101;
localparam S_RUN_INTERMEDIATE_1 = 4'b0110;
localparam S_RUN_INTERMEDIATE_2 = 4'b0111;
localparam S_DONE            = 4'b1000;

reg [3:0] nxt_state;
// reg resetting;
//initial begin
//state = S_IDLE;
//end

always @(posedge clk or posedge reset) begin
    if (reset) begin
        state <= S_IDLE;
    end else begin
        state <= nxt_state;
    end
end

always @(posedge clk) begin
    // $display("state : %b",state);
    case (state)
        S_IDLE: begin
            if (resetComplete && !reset && dataValid)
                nxt_state = S_READ;
            else begin
                nxt_state = S_IDLE;
            end
        end
        S_READ: begin
            nxt_state = dataValid ? (read ?  S_READ_INTERMEDIATE_1 : S_READ) : S_RUN_PRE;
        end
        S_READ_INTERMEDIATE_1: begin
            nxt_state = S_READ_INTERMEDIATE_2;
        end
        S_READ_INTERMEDIATE_2: begin
            nxt_state = dataValid ? S_READ : S_RUN_PRE;
        end
        S_RUN_PRE: begin
            nxt_state = S_RUN;
        end
        S_RUN: begin
             if (dp_done)
                nxt_state = S_DONE;
            else
                nxt_state=S_RUN_INTERMEDIATE_1;
        end
        S_RUN_INTERMEDIATE_1 : nxt_state=S_RUN_INTERMEDIATE_2;
        S_RUN_INTERMEDIATE_2 : begin
          if (dp_done)
                nxt_state = S_DONE;
            else
                nxt_state = S_RUN;
        end
        S_DONE: begin
            nxt_state = S_DONE;
        end
        default: nxt_state = S_IDLE;
    endcase
end
assign outValid = (state == S_DONE) ? 1 : 0;

endmodule