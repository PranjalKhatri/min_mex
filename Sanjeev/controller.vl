module controller
#(
    parameter ADDR_WIDTH = 4,
    parameter DATA_WIDTH = 5
)
(
    input wire clk,
    input wire reset, 
    input wire [ADDR_WIDTH-1:0] addr,
    input wire [DATA_WIDTH-1:0] data_in,

    output reg resetComplete,

    input wire[DATA_WIDTH:0] actual_mem_data,

    output wire[ADDR_WIDTH-1:0] mem_addr,
    output wire[DATA_WIDTH:0] mem_data,
    output reg re,
    output reg we,

    output reg [DATA_WIDTH-1:0] mx,
    output reg[DATA_WIDTH-1:0] mn,

    input wire dataValid,//data valid means giving input
    input wire read,//read the input or stop reading
    output wire outValid,//output is valid showing

    input wire [DATA_WIDTH-1:0] comp_gre,
    input wire [DATA_WIDTH-1:0] comp_les,

    input wire greflag,
    input wire lesflag,

    output reg [ADDR_WIDTH-1:0] max_addr,
    output reg [ADDR_WIDTH-1:0] min_addr,

    output reg[DATA_WIDTH-1:0] in1,
    output reg[DATA_WIDTH-1:0] in2,
    output reg[DATA_WIDTH-1:0] in3,
    output reg[DATA_WIDTH-1:0] in4
);
localparam S_IDLE             = 4'b0000;
localparam S_READ             = 4'b0001;
localparam S_READ_INTERMEDIATE_1 = 4'b0010;
localparam S_READ_INTERMEDIATE_2 = 4'b0011;
localparam S_RUN_PRE = 4'b0100;
localparam S_RUN              = 4'b0101;
localparam S_RUN_INTERMEDIATE_1 = 4'b0110;
localparam S_RUN_INTERMEDIATE_2 = 4'b0111;
localparam S_DONE            = 4'b1000;

// reg re,we;
reg loop2;
//temp
reg dp_done;
// assign rew =re;
// assign wew = we;
//temp

reg [3:0] nxt_state,state;

// wire [DATA_WIDTH:0] mem_data; // data going to memory
wire [DATA_WIDTH-1:0] data_mem; // data we are sending to memory

reg [DATA_WIDTH-1:0] resetAddr; // reset iterator
reg resetting; // iterator running?

reg [ADDR_WIDTH-1:0] temp_addr; // run iterator
// wire[ADDR_WIDTH-1:0] mem_addr; // MAR

assign mem_addr = (state == S_IDLE) ? resetAddr : ((state == S_RUN | state == S_RUN_INTERMEDIATE_1 | state==S_RUN_INTERMEDIATE_2) ? temp_addr : addr);

assign data_mem = (reset || resetting) ? 0 : data_in;
assign mem_data =  ((state==S_IDLE) ? {1'b0, 5'b0} : {1'b1, data_mem}); // MDR

assign outValid = (state == S_DONE) ? 1 : 0;

initial begin
    resetAddr=0;
    // resetComplete=1;
    dp_done=0;
    temp_addr=0;
end
//assign data_out = (re & !we) ? mem_data : ~0;
//assign resetComplete = (reset || resetting) ? 0 : 1;

always @(posedge clk) begin
    if(reset || resetting) resetComplete <= 0;
    else resetComplete<=1;

    if(re & !we)begin
    //    data_out<= mem_data;
    end else begin 
        // data_out<=0;
    end
end

//reg [DATA_WIDTH-1 : 0] mx,mn,cur;
reg[DATA_WIDTH-1:0] cur;

initial begin
    mx=0;
    mn=~0;
end

always @(posedge clk) begin
    // $display("state : %b",state);
    case (state)
        S_IDLE: begin
            if (resetComplete && !reset && dataValid)
                nxt_state = S_READ;
            else begin
                nxt_state = S_IDLE;
            end
        end
        S_READ: begin
            nxt_state = dataValid ? (read ?  S_READ_INTERMEDIATE_1 : S_READ) : S_RUN_PRE;
        end
        S_READ_INTERMEDIATE_1: begin
            nxt_state = S_READ_INTERMEDIATE_2;
        end
        S_READ_INTERMEDIATE_2: begin
            nxt_state = dataValid ? S_READ : S_RUN_PRE;
        end
        S_RUN_PRE: begin
            nxt_state = S_RUN;
        end
        S_RUN: begin
             if (dp_done)
                nxt_state = S_DONE;
            else
                nxt_state=S_RUN_INTERMEDIATE_1;
        end
        S_RUN_INTERMEDIATE_1 : nxt_state=S_RUN_INTERMEDIATE_2;
        S_RUN_INTERMEDIATE_2 : begin
          if (dp_done)
                nxt_state = S_DONE;
            else
                nxt_state = S_RUN;
        end
        S_DONE: begin
            nxt_state = S_DONE;
        end
        default: nxt_state = S_IDLE;
    endcase
end

always @(posedge clk) begin
    // $display("state : %b re %b we %b memdata %d memaddr %d",state,re,we,mem_data,mem_addr);
 if (reset) begin
    in1 <= 0;
    in2 <= 0;
    in3 <= ~0;
    in4 <= ~0;
    loop2<=0;
    temp_addr <= 0;
//  resetComplete <= 0;
    dp_done <= 0;
    resetAddr<=0;
    resetting <= 1;
    we<=1;
    re<=0;
    mn <= ~0;
    mx <= 0;
    min_addr <= 0;
    max_addr <= 0;
   end else if (resetting) begin
       $display("reset at address %d",resetAddr);
       if (resetAddr == (1<<ADDR_WIDTH)-1)begin
//             resetComplete=1;
           resetting <= 0;
       end
       else begin
           resetAddr <= resetAddr + 1;
       end
   end 
  case (state)
        S_IDLE: begin
            // resetAddr <= 0;
            re<=0;
            we<=1;
        end
        S_READ: begin
        end
        S_READ_INTERMEDIATE_1: begin
                <=0;
            we<=1;
            in1 <= data_in;
            in2 <= data_in;
            in3 <= data_in;
            in4 <= data_in;
        end
        S_READ_INTERMEDIATE_2: begin
        end
        S_RUN_PRE: begin
            re<=1;
            we<=0;/*to prevent data to be written to tempaddr{ why you ask? since the memory read is enabled in the next 3 states, then when transitioning from last read
            to run state the write is on and the address swithces immidiately to temp_addr which is 0 initially so the mem[0] is overwritten with mem[last]}*/
        end
        S_RUN: begin
            re<=1;
            we<=0;
        end
        S_RUN_INTERMEDIATE_1 : begin
          if(actual_mem_data&6'b100000)begin
            in1 <= mx;
            in2 <= actual_mem_data;
            in3 <= mn;
            in4 <= actual_mem_data;
          end
          re<=1;
          we<=0;
        end
        S_RUN_INTERMEDIATE_2 : begin
            re<=1;
            we<=0;
            mx <= comp_gre;
            mn <= comp_les;
            if(greflag) begin
                max_addr <= temp_addr;
            end
            if(lesflag) begin
                min_addr <= temp_addr;
            end
            // $display("mx %d mn %d cmp_gre %d cmp_les %d",mx,mn,comp_gre,comp_les);
          if(temp_addr == (1<<ADDR_WIDTH)-1)begin
                if(loop2)begin 
            dp_done<=1;
                end else begin
                    temp_addr<=1;
                    loop2<=1;
                 end
          end else begin 
            temp_addr = temp_addr+1;
          end
        end
        S_DONE: begin
            re<=1;
            we<=0;
            dp_done<=1;
            $display("done mn %d mx %d mnaddr %d mxaddr %d",mn,mx,min_addr,max_addr);
        end
    endcase
end


always @(posedge clk or posedge reset) begin
    if (reset) begin
        state <= S_IDLE;
    end else begin
        state <= nxt_state;
    end
end

endmodule