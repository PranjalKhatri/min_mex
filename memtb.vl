`timescale 1ns/1ps

module memtb();
    // Clock declaration and initialization
    reg clk = 0;  // Initialize clk to avoid X state
    
    // Clock generation
    always begin
        #5 clk = ~clk;
    end
    
    // Memory parameters
    localparam aw = 4;
    localparam dw = 5;
    localparam depth = 1 << aw; // Number of memory locations
    
    // Test signals
    reg [aw-1:0] addr;
    reg [dw-1:0] data_in;
    wire [dw-1:0] data_out;
    reg re, we;
    
    // Bidirectional data bus handling
    wire [dw-1:0] data;
    assign data = we ? data_in : 'hz; // Drive data only during write
    assign data_out = data; // Read data from bus
    
    // Memory module instantiation
    mem #(
        .ADDR_WIDTH(aw),
        .DATA_WIDTH(dw)
    ) m (
        .clk(clk),
        .readEnable(re),
        .writeEnable(we),
        .addr(addr),
        .data(data)
    );
    
    // Monitor statement
    initial begin
        $monitor("Time : %0t | addr : %d | data : %d | read : %b | write %b", 
                 $time, addr, data, re, we);
    end
    
    // Test sequence
    integer i; // Loop variable
    reg [dw-1:0] test_memory [0:depth-1]; // Array to store expected values
    
    initial begin
        // Initialize signals
        addr = 0;
        data_in = 0;
        re = 0;
        we = 0;
        
        // Writing random values to all memory locations
        for (i = 0; i < depth; i = i + 1) begin
            #10 addr = i;
                data_in = $random % (1 << dw); // Generate random value
                test_memory[i] = data_in; // Store expected value
                we = 1;
        end
        
        // Disable write
        #10 we = 0;

        // Reading back all values
        for (i = 0; i < depth; i = i + 1) begin
            #10 addr = i;
                re = 1;
            #10 if (data !== test_memory[i])
                    $display("ERROR: Mismatch at addr %d, expected %d, got %d", 
                             addr, test_memory[i], data);
        end
        
        // End simulation
        #20 $finish;
    end
endmodule
