`timescale 1ns/1ps

module min_mex_tb;
    parameter ADDR_WIDTH = 4;
    parameter DATA_WIDTH = 5;
    
    reg clk;
    reg reset;
    reg dataValid;
    reg read;
    reg [ADDR_WIDTH-1:0] addr;
    reg [DATA_WIDTH-1:0] data;
    
    wire outValid;
    wire [DATA_WIDTH-1:0] data_out;
    
    // Instantiate the min_mex module
    min_mex #(.ADDR_WIDTH(ADDR_WIDTH), .DATA_WIDTH(DATA_WIDTH)) dut (
        .clk(clk),
        .reset(reset),
        .dataValid(dataValid),
        .read(read),
        .addr(addr),
        .data(data),
        .outValid(outValid),
        .data_out(data_out)
    );
    always @(*) begin
        $monitor("TIME: %0t | clk: %b | reset: %b | dataValid: %b | read: %b | addr: %b | data: %b | outValid: %b | data_out: %b", 
                 $time, clk, reset, dataValid, read, addr, data, outValid, data_out);
    end
    // Clock generation
    always #5 clk = ~clk;
    
    initial begin
        // Initialize signals
        clk = 0;
        reset = 0;
        dataValid = 0;
        read = 0;
        addr = 0;
        data = 0;
        
        #10 reset = 0; // Deassert reset
        while (!dut.resetComplete) begin
            
        end
        // Write data to memory
        #10 dataValid = 1;read=1; addr = 4'b0010; data = 5'b10101;
        #10 dataValid = 0;read = 0;
        
        // Read data back
        #10  addr = 4'b0010;
        // Wait for output to become valid
        #20;
        
        // Display results
        $display("Data at address %b: %b", addr, data_out);
        
        // End simulation
        #30 $finish;
    end
    
    initial begin
        $dumpfile("min_mex_tb.vcd");
        $dumpvars(0, min_mex_tb);
    end
endmodule
